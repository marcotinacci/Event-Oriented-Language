/*
* generated by Xtext
*/

package org.mt.lic.eol.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EventOrientedLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cGlobalsAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cGlobalsGlobalSectionParserRuleCall_0_0_0 = (RuleCall)cGlobalsAssignment_0_0.eContents().get(0);
		private final Assignment cEventsAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cEventsEventSectionParserRuleCall_0_1_0 = (RuleCall)cEventsAssignment_0_1.eContents().get(0);
		private final Assignment cHandlersAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cHandlersHandlerSectionParserRuleCall_0_2_0 = (RuleCall)cHandlersAssignment_0_2.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitAbstractBlockParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * Main structure of a program. Global variables, events and handlers can be declared
		// * in any order but sections must stay separated. The init section must be the last one
		// * and it is mandatory.
		// * /Program:
		//	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=AbstractBlock "end";
		public ParserRule getRule() { return rule; }

		//(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=AbstractBlock "end"
		public Group getGroup() { return cGroup; }

		//globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//globals=GlobalSection?
		public Assignment getGlobalsAssignment_0_0() { return cGlobalsAssignment_0_0; }

		//GlobalSection
		public RuleCall getGlobalsGlobalSectionParserRuleCall_0_0_0() { return cGlobalsGlobalSectionParserRuleCall_0_0_0; }

		//events=EventSection?
		public Assignment getEventsAssignment_0_1() { return cEventsAssignment_0_1; }

		//EventSection
		public RuleCall getEventsEventSectionParserRuleCall_0_1_0() { return cEventsEventSectionParserRuleCall_0_1_0; }

		//handlers=HandlerSection?
		public Assignment getHandlersAssignment_0_2() { return cHandlersAssignment_0_2; }

		//HandlerSection
		public RuleCall getHandlersHandlerSectionParserRuleCall_0_2_0() { return cHandlersHandlerSectionParserRuleCall_0_2_0; }

		//"init:"
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }

		//init=AbstractBlock
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }

		//AbstractBlock
		public RuleCall getInitAbstractBlockParserRuleCall_2_0() { return cInitAbstractBlockParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class GlobalSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGlobalsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGlobalsVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cGlobalsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// SECTIONS
		//GlobalSection:
		//	"globals:" (globals+=VariableDeclaration ";")+;
		public ParserRule getRule() { return rule; }

		//"globals:" (globals+=VariableDeclaration ";")+
		public Group getGroup() { return cGroup; }

		//"globals:"
		public Keyword getGlobalsKeyword_0() { return cGlobalsKeyword_0; }

		//(globals+=VariableDeclaration ";")+
		public Group getGroup_1() { return cGroup_1; }

		//globals+=VariableDeclaration
		public Assignment getGlobalsAssignment_1_0() { return cGlobalsAssignment_1_0; }

		//VariableDeclaration
		public RuleCall getGlobalsVariableDeclarationParserRuleCall_1_0_0() { return cGlobalsVariableDeclarationParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class EventSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEventsEventDeclParserRuleCall_1_0_0 = (RuleCall)cEventsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EventSection:
		//	"events:" (events+=EventDecl ";")+;
		public ParserRule getRule() { return rule; }

		//"events:" (events+=EventDecl ";")+
		public Group getGroup() { return cGroup; }

		//"events:"
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }

		//(events+=EventDecl ";")+
		public Group getGroup_1() { return cGroup_1; }

		//events+=EventDecl
		public Assignment getEventsAssignment_1_0() { return cEventsAssignment_1_0; }

		//EventDecl
		public RuleCall getEventsEventDeclParserRuleCall_1_0_0() { return cEventsEventDeclParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class HandlerSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HandlerSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandlersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHandlersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHandlersHandlerDeclParserRuleCall_1_0 = (RuleCall)cHandlersAssignment_1.eContents().get(0);
		
		//HandlerSection:
		//	"handlers:" handlers+=HandlerDecl+;
		public ParserRule getRule() { return rule; }

		//"handlers:" handlers+=HandlerDecl+
		public Group getGroup() { return cGroup; }

		//"handlers:"
		public Keyword getHandlersKeyword_0() { return cHandlersKeyword_0; }

		//handlers+=HandlerDecl+
		public Assignment getHandlersAssignment_1() { return cHandlersAssignment_1; }

		//HandlerDecl
		public RuleCall getHandlersHandlerDeclParserRuleCall_1_0() { return cHandlersHandlerDeclParserRuleCall_1_0; }
	}

	public class EventDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsVariableDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EventDecl:
		//	name=ID "(" (params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=VariableDeclaration ("," params+=VariableDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=VariableDeclaration
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//VariableDeclaration
		public RuleCall getParamsVariableDeclarationParserRuleCall_2_0_0() { return cParamsVariableDeclarationParserRuleCall_2_0_0; }

		//("," params+=VariableDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=VariableDeclaration
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//VariableDeclaration
		public RuleCall getParamsVariableDeclarationParserRuleCall_2_1_1_0() { return cParamsVariableDeclarationParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class HandlerDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HandlerDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBindParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBindParamsVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cBindParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cBindParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cBindParamsVariableDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cBindParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsVariableDeclarationParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsVariableDeclarationParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyAbstractBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//HandlerDecl:
		//	name=ID "[" (bindParams+=VariableDeclaration ("," bindParams+=VariableDeclaration)*)? "]" "("
		//	(params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")" body=AbstractBlock;
		public ParserRule getRule() { return rule; }

		//name=ID "[" (bindParams+=VariableDeclaration ("," bindParams+=VariableDeclaration)*)? "]" "("
		//(params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")" body=AbstractBlock
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(bindParams+=VariableDeclaration ("," bindParams+=VariableDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }

		//bindParams+=VariableDeclaration
		public Assignment getBindParamsAssignment_2_0() { return cBindParamsAssignment_2_0; }

		//VariableDeclaration
		public RuleCall getBindParamsVariableDeclarationParserRuleCall_2_0_0() { return cBindParamsVariableDeclarationParserRuleCall_2_0_0; }

		//("," bindParams+=VariableDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//bindParams+=VariableDeclaration
		public Assignment getBindParamsAssignment_2_1_1() { return cBindParamsAssignment_2_1_1; }

		//VariableDeclaration
		public RuleCall getBindParamsVariableDeclarationParserRuleCall_2_1_1_0() { return cBindParamsVariableDeclarationParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=VariableDeclaration ("," params+=VariableDeclaration)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=VariableDeclaration
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//VariableDeclaration
		public RuleCall getParamsVariableDeclarationParserRuleCall_5_0_0() { return cParamsVariableDeclarationParserRuleCall_5_0_0; }

		//("," params+=VariableDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=VariableDeclaration
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//VariableDeclaration
		public RuleCall getParamsVariableDeclarationParserRuleCall_5_1_1_0() { return cParamsVariableDeclarationParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=AbstractBlock
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//AbstractBlock
		public RuleCall getBodyAbstractBlockParserRuleCall_7_0() { return cBodyAbstractBlockParserRuleCall_7_0; }
	}

	public class AbstractBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCommandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cConstructParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cCompoundAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cBodyAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cBodyAbstractBlockParserRuleCall_2_2_0 = (RuleCall)cBodyAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		/// *
		// * Block java-style with Composite
		// * /AbstractBlock:
		//	Command ";" | Construct | {Compound} "{" body+=AbstractBlock* "}";
		public ParserRule getRule() { return rule; }

		//Command ";" | Construct | {Compound} "{" body+=AbstractBlock* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Command ";"
		public Group getGroup_0() { return cGroup_0; }

		//Command
		public RuleCall getCommandParserRuleCall_0_0() { return cCommandParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//Construct
		public RuleCall getConstructParserRuleCall_1() { return cConstructParserRuleCall_1; }

		//{Compound} "{" body+=AbstractBlock* "}"
		public Group getGroup_2() { return cGroup_2; }

		//{Compound}
		public Action getCompoundAction_2_0() { return cCompoundAction_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//body+=AbstractBlock*
		public Assignment getBodyAssignment_2_2() { return cBodyAssignment_2_2; }

		//AbstractBlock
		public RuleCall getBodyAbstractBlockParserRuleCall_2_2_0() { return cBodyAbstractBlockParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableAssignAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cNameVariableDeclarationCrossReference_1_1_0 = (CrossReference)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameVariableDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cNameVariableDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBindHandlerAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cEventNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cEventNameEventDeclCrossReference_2_1_0 = (CrossReference)cEventNameAssignment_2_1.eContents().get(0);
		private final RuleCall cEventNameEventDeclIDTerminalRuleCall_2_1_0_1 = (RuleCall)cEventNameEventDeclCrossReference_2_1_0.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cHandlerNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cHandlerNameHandlerDeclCrossReference_2_3_0 = (CrossReference)cHandlerNameAssignment_2_3.eContents().get(0);
		private final RuleCall cHandlerNameHandlerDeclIDTerminalRuleCall_2_3_0_1 = (RuleCall)cHandlerNameHandlerDeclCrossReference_2_3_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Assignment cBindParamsAssignment_2_5_0 = (Assignment)cGroup_2_5.eContents().get(0);
		private final RuleCall cBindParamsExpressionParserRuleCall_2_5_0_0 = (RuleCall)cBindParamsAssignment_2_5_0.eContents().get(0);
		private final Group cGroup_2_5_1 = (Group)cGroup_2_5.eContents().get(1);
		private final Keyword cCommaKeyword_2_5_1_0 = (Keyword)cGroup_2_5_1.eContents().get(0);
		private final Assignment cBindParamsAssignment_2_5_1_1 = (Assignment)cGroup_2_5_1.eContents().get(1);
		private final RuleCall cBindParamsExpressionParserRuleCall_2_5_1_1_0 = (RuleCall)cBindParamsAssignment_2_5_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cUnbindHandlerAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cEventNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cEventNameEventDeclCrossReference_3_1_0 = (CrossReference)cEventNameAssignment_3_1.eContents().get(0);
		private final RuleCall cEventNameEventDeclIDTerminalRuleCall_3_1_0_1 = (RuleCall)cEventNameEventDeclCrossReference_3_1_0.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cHandlerNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cHandlerNameHandlerDeclCrossReference_3_3_0 = (CrossReference)cHandlerNameAssignment_3_3.eContents().get(0);
		private final RuleCall cHandlerNameHandlerDeclIDTerminalRuleCall_3_3_0_1 = (RuleCall)cHandlerNameHandlerDeclCrossReference_3_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRaiseEventAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cRaiseKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cEventAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cEventEventDeclCrossReference_4_2_0 = (CrossReference)cEventAssignment_4_2.eContents().get(0);
		private final RuleCall cEventEventDeclIDTerminalRuleCall_4_2_0_1 = (RuleCall)cEventEventDeclCrossReference_4_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Assignment cParamsAssignment_4_4_0 = (Assignment)cGroup_4_4.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_4_4_0_0 = (RuleCall)cParamsAssignment_4_4_0.eContents().get(0);
		private final Group cGroup_4_4_1 = (Group)cGroup_4_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_4_1_0 = (Keyword)cGroup_4_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_4_1_1 = (Assignment)cGroup_4_4_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_4_4_1_1_0 = (RuleCall)cParamsAssignment_4_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrintOutputAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cOutKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutputAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOutputExpressionParserRuleCall_5_2_0 = (RuleCall)cOutputAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cReadInputAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cInKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cInputAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final CrossReference cInputVariableDeclarationCrossReference_6_2_0 = (CrossReference)cInputAssignment_6_2.eContents().get(0);
		private final RuleCall cInputVariableDeclarationIDTerminalRuleCall_6_2_0_1 = (RuleCall)cInputVariableDeclarationCrossReference_6_2_0.eContents().get(1);
		
		//Command:
		//	VariableDeclaration | {VariableAssign} name=[VariableDeclaration] "=" value=Expression | {BindHandler}
		//	eventName=[EventDecl] "+=" handlerName=[HandlerDecl] "[" (bindParams+=Expression ("," bindParams+=Expression))? "]" |
		//	{UnbindHandler} eventName=[EventDecl] "-=" handlerName=[HandlerDecl] | {RaiseEvent} "raise" event=[EventDecl] "("
		//	(params+=Expression ("," params+=Expression)*)? ")" | {PrintOutput} "out" output=Expression | {ReadInput} "in"
		//	input=[VariableDeclaration];
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | {VariableAssign} name=[VariableDeclaration] "=" value=Expression | {BindHandler}
		//eventName=[EventDecl] "+=" handlerName=[HandlerDecl] "[" (bindParams+=Expression ("," bindParams+=Expression))? "]" |
		//{UnbindHandler} eventName=[EventDecl] "-=" handlerName=[HandlerDecl] | {RaiseEvent} "raise" event=[EventDecl] "("
		//(params+=Expression ("," params+=Expression)*)? ")" | {PrintOutput} "out" output=Expression | {ReadInput} "in"
		//input=[VariableDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//{VariableAssign} name=[VariableDeclaration] "=" value=Expression
		public Group getGroup_1() { return cGroup_1; }

		//{VariableAssign}
		public Action getVariableAssignAction_1_0() { return cVariableAssignAction_1_0; }

		//name=[VariableDeclaration]
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//[VariableDeclaration]
		public CrossReference getNameVariableDeclarationCrossReference_1_1_0() { return cNameVariableDeclarationCrossReference_1_1_0; }

		//ID
		public RuleCall getNameVariableDeclarationIDTerminalRuleCall_1_1_0_1() { return cNameVariableDeclarationIDTerminalRuleCall_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//value=Expression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_3_0() { return cValueExpressionParserRuleCall_1_3_0; }

		//{BindHandler} eventName=[EventDecl] "+=" handlerName=[HandlerDecl] "[" (bindParams+=Expression (","
		//bindParams+=Expression))? "]"
		public Group getGroup_2() { return cGroup_2; }

		//{BindHandler}
		public Action getBindHandlerAction_2_0() { return cBindHandlerAction_2_0; }

		//eventName=[EventDecl]
		public Assignment getEventNameAssignment_2_1() { return cEventNameAssignment_2_1; }

		//[EventDecl]
		public CrossReference getEventNameEventDeclCrossReference_2_1_0() { return cEventNameEventDeclCrossReference_2_1_0; }

		//ID
		public RuleCall getEventNameEventDeclIDTerminalRuleCall_2_1_0_1() { return cEventNameEventDeclIDTerminalRuleCall_2_1_0_1; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_2_2() { return cPlusSignEqualsSignKeyword_2_2; }

		//handlerName=[HandlerDecl]
		public Assignment getHandlerNameAssignment_2_3() { return cHandlerNameAssignment_2_3; }

		//[HandlerDecl]
		public CrossReference getHandlerNameHandlerDeclCrossReference_2_3_0() { return cHandlerNameHandlerDeclCrossReference_2_3_0; }

		//ID
		public RuleCall getHandlerNameHandlerDeclIDTerminalRuleCall_2_3_0_1() { return cHandlerNameHandlerDeclIDTerminalRuleCall_2_3_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_4() { return cLeftSquareBracketKeyword_2_4; }

		//(bindParams+=Expression ("," bindParams+=Expression))?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//bindParams+=Expression
		public Assignment getBindParamsAssignment_2_5_0() { return cBindParamsAssignment_2_5_0; }

		//Expression
		public RuleCall getBindParamsExpressionParserRuleCall_2_5_0_0() { return cBindParamsExpressionParserRuleCall_2_5_0_0; }

		//"," bindParams+=Expression
		public Group getGroup_2_5_1() { return cGroup_2_5_1; }

		//","
		public Keyword getCommaKeyword_2_5_1_0() { return cCommaKeyword_2_5_1_0; }

		//bindParams+=Expression
		public Assignment getBindParamsAssignment_2_5_1_1() { return cBindParamsAssignment_2_5_1_1; }

		//Expression
		public RuleCall getBindParamsExpressionParserRuleCall_2_5_1_1_0() { return cBindParamsExpressionParserRuleCall_2_5_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_6() { return cRightSquareBracketKeyword_2_6; }

		//{UnbindHandler} eventName=[EventDecl] "-=" handlerName=[HandlerDecl]
		public Group getGroup_3() { return cGroup_3; }

		//{UnbindHandler}
		public Action getUnbindHandlerAction_3_0() { return cUnbindHandlerAction_3_0; }

		//eventName=[EventDecl]
		public Assignment getEventNameAssignment_3_1() { return cEventNameAssignment_3_1; }

		//[EventDecl]
		public CrossReference getEventNameEventDeclCrossReference_3_1_0() { return cEventNameEventDeclCrossReference_3_1_0; }

		//ID
		public RuleCall getEventNameEventDeclIDTerminalRuleCall_3_1_0_1() { return cEventNameEventDeclIDTerminalRuleCall_3_1_0_1; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_3_2() { return cHyphenMinusEqualsSignKeyword_3_2; }

		//handlerName=[HandlerDecl]
		public Assignment getHandlerNameAssignment_3_3() { return cHandlerNameAssignment_3_3; }

		//[HandlerDecl]
		public CrossReference getHandlerNameHandlerDeclCrossReference_3_3_0() { return cHandlerNameHandlerDeclCrossReference_3_3_0; }

		//ID
		public RuleCall getHandlerNameHandlerDeclIDTerminalRuleCall_3_3_0_1() { return cHandlerNameHandlerDeclIDTerminalRuleCall_3_3_0_1; }

		//{RaiseEvent} "raise" event=[EventDecl] "(" (params+=Expression ("," params+=Expression)*)? ")"
		public Group getGroup_4() { return cGroup_4; }

		//{RaiseEvent}
		public Action getRaiseEventAction_4_0() { return cRaiseEventAction_4_0; }

		//"raise"
		public Keyword getRaiseKeyword_4_1() { return cRaiseKeyword_4_1; }

		//event=[EventDecl]
		public Assignment getEventAssignment_4_2() { return cEventAssignment_4_2; }

		//[EventDecl]
		public CrossReference getEventEventDeclCrossReference_4_2_0() { return cEventEventDeclCrossReference_4_2_0; }

		//ID
		public RuleCall getEventEventDeclIDTerminalRuleCall_4_2_0_1() { return cEventEventDeclIDTerminalRuleCall_4_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_3() { return cLeftParenthesisKeyword_4_3; }

		//(params+=Expression ("," params+=Expression)*)?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//params+=Expression
		public Assignment getParamsAssignment_4_4_0() { return cParamsAssignment_4_4_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_4_4_0_0() { return cParamsExpressionParserRuleCall_4_4_0_0; }

		//("," params+=Expression)*
		public Group getGroup_4_4_1() { return cGroup_4_4_1; }

		//","
		public Keyword getCommaKeyword_4_4_1_0() { return cCommaKeyword_4_4_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_4_4_1_1() { return cParamsAssignment_4_4_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_4_4_1_1_0() { return cParamsExpressionParserRuleCall_4_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_5() { return cRightParenthesisKeyword_4_5; }

		//{PrintOutput} "out" output=Expression
		public Group getGroup_5() { return cGroup_5; }

		//{PrintOutput}
		public Action getPrintOutputAction_5_0() { return cPrintOutputAction_5_0; }

		//"out"
		public Keyword getOutKeyword_5_1() { return cOutKeyword_5_1; }

		//output=Expression
		public Assignment getOutputAssignment_5_2() { return cOutputAssignment_5_2; }

		//Expression
		public RuleCall getOutputExpressionParserRuleCall_5_2_0() { return cOutputExpressionParserRuleCall_5_2_0; }

		//{ReadInput} "in" input=[VariableDeclaration]
		public Group getGroup_6() { return cGroup_6; }

		//{ReadInput}
		public Action getReadInputAction_6_0() { return cReadInputAction_6_0; }

		//"in"
		public Keyword getInKeyword_6_1() { return cInKeyword_6_1; }

		//input=[VariableDeclaration]
		public Assignment getInputAssignment_6_2() { return cInputAssignment_6_2; }

		//[VariableDeclaration]
		public CrossReference getInputVariableDeclarationCrossReference_6_2_0() { return cInputVariableDeclarationCrossReference_6_2_0; }

		//ID
		public RuleCall getInputVariableDeclarationIDTerminalRuleCall_6_2_0_1() { return cInputVariableDeclarationIDTerminalRuleCall_6_2_0_1; }
	}

	public class ConstructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Construct");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIfThenElseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConditionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_0_3_0 = (RuleCall)cConditionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cThenBlockAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cThenBlockAbstractBlockParserRuleCall_0_5_0 = (RuleCall)cThenBlockAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Assignment cBalancedAssignment_0_6_0 = (Assignment)cGroup_0_6.eContents().get(0);
		private final Keyword cBalancedElseKeyword_0_6_0_0 = (Keyword)cBalancedAssignment_0_6_0.eContents().get(0);
		private final Assignment cElseBlockAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cElseBlockAbstractBlockParserRuleCall_0_6_1_0 = (RuleCall)cElseBlockAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWhileAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cWhileKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cConditionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_1_3_0 = (RuleCall)cConditionAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cBlockAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cBlockAbstractBlockParserRuleCall_1_5_0 = (RuleCall)cBlockAssignment_1_5.eContents().get(0);
		
		//Construct:
		//	{IfThenElse} "if" "(" condition=Condition ")" thenBlock=AbstractBlock (balanced?="else" elseBlock=AbstractBlock)? |
		//	{While} "while" "(" condition=Condition ")" block=AbstractBlock;
		public ParserRule getRule() { return rule; }

		//{IfThenElse} "if" "(" condition=Condition ")" thenBlock=AbstractBlock (balanced?="else" elseBlock=AbstractBlock)? |
		//{While} "while" "(" condition=Condition ")" block=AbstractBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IfThenElse} "if" "(" condition=Condition ")" thenBlock=AbstractBlock (balanced?="else" elseBlock=AbstractBlock)?
		public Group getGroup_0() { return cGroup_0; }

		//{IfThenElse}
		public Action getIfThenElseAction_0_0() { return cIfThenElseAction_0_0; }

		//"if"
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//condition=Condition
		public Assignment getConditionAssignment_0_3() { return cConditionAssignment_0_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_3_0() { return cConditionConditionParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//thenBlock=AbstractBlock
		public Assignment getThenBlockAssignment_0_5() { return cThenBlockAssignment_0_5; }

		//AbstractBlock
		public RuleCall getThenBlockAbstractBlockParserRuleCall_0_5_0() { return cThenBlockAbstractBlockParserRuleCall_0_5_0; }

		//(balanced?="else" elseBlock=AbstractBlock)?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//balanced?="else"
		public Assignment getBalancedAssignment_0_6_0() { return cBalancedAssignment_0_6_0; }

		//"else"
		public Keyword getBalancedElseKeyword_0_6_0_0() { return cBalancedElseKeyword_0_6_0_0; }

		//elseBlock=AbstractBlock
		public Assignment getElseBlockAssignment_0_6_1() { return cElseBlockAssignment_0_6_1; }

		//AbstractBlock
		public RuleCall getElseBlockAbstractBlockParserRuleCall_0_6_1_0() { return cElseBlockAbstractBlockParserRuleCall_0_6_1_0; }

		//{While} "while" "(" condition=Condition ")" block=AbstractBlock
		public Group getGroup_1() { return cGroup_1; }

		//{While}
		public Action getWhileAction_1_0() { return cWhileAction_1_0; }

		//"while"
		public Keyword getWhileKeyword_1_1() { return cWhileKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//condition=Condition
		public Assignment getConditionAssignment_1_3() { return cConditionAssignment_1_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_3_0() { return cConditionConditionParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//block=AbstractBlock
		public Assignment getBlockAssignment_1_5() { return cBlockAssignment_1_5; }

		//AbstractBlock
		public RuleCall getBlockAbstractBlockParserRuleCall_1_5_0() { return cBlockAbstractBlockParserRuleCall_1_5_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMathExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// EXPRESSIONS
		//Expression:
		//	MathExpression | Condition;
		public ParserRule getRule() { return rule; }

		//MathExpression | Condition
		public Alternatives getAlternatives() { return cAlternatives; }

		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_0() { return cMathExpressionParserRuleCall_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_1() { return cConditionParserRuleCall_1; }
	}

	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MathExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MathExpression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns MathExpression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns MathExpression:
		//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cMathExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNumericValueParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVariableReferenceAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cVarAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_2_1_0 = (CrossReference)cVarAssignment_2_1.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_2_1_0.eContents().get(1);
		
		//PrimaryExpression returns MathExpression:
		//	"(" MathExpression ")" | {NumberLiteral} value=NumericValue | {VariableReference} var=[VariableDeclaration];
		public ParserRule getRule() { return rule; }

		//"(" MathExpression ")" | {NumberLiteral} value=NumericValue | {VariableReference} var=[VariableDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" MathExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_0_1() { return cMathExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{NumberLiteral} value=NumericValue
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=NumericValue
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//NumericValue
		public RuleCall getValueNumericValueParserRuleCall_1_1_0() { return cValueNumericValueParserRuleCall_1_1_0; }

		//{VariableReference} var=[VariableDeclaration]
		public Group getGroup_2() { return cGroup_2; }

		//{VariableReference}
		public Action getVariableReferenceAction_2_0() { return cVariableReferenceAction_2_0; }

		//var=[VariableDeclaration]
		public Assignment getVarAssignment_2_1() { return cVarAssignment_2_1; }

		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_2_1_0() { return cVarVariableDeclarationCrossReference_2_1_0; }

		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_2_1_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_2_1_0_1; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cBinaryBooleanParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// CONDITIONS
		//Condition:
		//	BinaryBoolean;
		public ParserRule getRule() { return rule; }

		//BinaryBoolean
		public RuleCall getBinaryBooleanParserRuleCall() { return cBinaryBooleanParserRuleCall; }
	}

	public class BinaryBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryBoolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryBooleanParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cANDKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cORKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryBooleanParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//BinaryBoolean returns Condition:
		//	UnaryBoolean (({And.left=current} "AND" | {Or.left=current} "OR") right=UnaryBoolean)*;
		public ParserRule getRule() { return rule; }

		//UnaryBoolean (({And.left=current} "AND" | {Or.left=current} "OR") right=UnaryBoolean)*
		public Group getGroup() { return cGroup; }

		//UnaryBoolean
		public RuleCall getUnaryBooleanParserRuleCall_0() { return cUnaryBooleanParserRuleCall_0; }

		//(({And.left=current} "AND" | {Or.left=current} "OR") right=UnaryBoolean)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current} "AND" | {Or.left=current} "OR"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{And.left=current} "AND"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }

		//"AND"
		public Keyword getANDKeyword_1_0_0_1() { return cANDKeyword_1_0_0_1; }

		//{Or.left=current} "OR"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }

		//"OR"
		public Keyword getORKeyword_1_0_1_1() { return cORKeyword_1_0_1_1; }

		//right=UnaryBoolean
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryBoolean
		public RuleCall getRightUnaryBooleanParserRuleCall_1_1_0() { return cRightUnaryBooleanParserRuleCall_1_1_0; }
	}

	public class UnaryBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cNOTKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCondConditionParserRuleCall_2_2_0 = (RuleCall)cCondAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_3_1_0 = (CrossReference)cVarAssignment_3_1.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cMathExpressionParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Group cGroup_4_1_0 = (Group)cAlternatives_4_1.eContents().get(0);
		private final Action cLeqLeftAction_4_1_0_0 = (Action)cGroup_4_1_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_4_1_0_1 = (Keyword)cGroup_4_1_0.eContents().get(1);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Action cLessLeftAction_4_1_1_0 = (Action)cGroup_4_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_4_1_1_1 = (Keyword)cGroup_4_1_1.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cAlternatives_4_1.eContents().get(2);
		private final Action cEqLeftAction_4_1_2_0 = (Action)cGroup_4_1_2.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_4_1_2_1 = (Keyword)cGroup_4_1_2.eContents().get(1);
		private final Group cGroup_4_1_3 = (Group)cAlternatives_4_1.eContents().get(3);
		private final Action cGeqLeftAction_4_1_3_0 = (Action)cGroup_4_1_3.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4_1_3_1 = (Keyword)cGroup_4_1_3.eContents().get(1);
		private final Group cGroup_4_1_4 = (Group)cAlternatives_4_1.eContents().get(4);
		private final Action cGtrLeftAction_4_1_4_0 = (Action)cGroup_4_1_4.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_1_4_1 = (Keyword)cGroup_4_1_4.eContents().get(1);
		private final Assignment cRightAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cRightMathExpressionParserRuleCall_4_2_0 = (RuleCall)cRightAssignment_4_2.eContents().get(0);
		
		//UnaryBoolean returns Condition:
		//	"(" Condition ")" // true o false
		//	// negazione
		//	// riferimento a variabile booleana
		//	// confronto tra espressioni
		//	| {BooleanLiteral} value=BOOL | {Not} "NOT" cond=Condition | {BooleanReference} var=[VariableDeclaration] |
		//	MathExpression ({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Geq.left=current} ">=" |
		//	{Gtr.left=current} ">") right=MathExpression;
		public ParserRule getRule() { return rule; }

		//"(" Condition ")" // true o false
		//// negazione
		//// riferimento a variabile booleana
		//// confronto tra espressioni
		//| {BooleanLiteral} value=BOOL | {Not} "NOT" cond=Condition | {BooleanReference} var=[VariableDeclaration] |
		//MathExpression ({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Geq.left=current} ">=" |
		//{Gtr.left=current} ">") right=MathExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Condition ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{BooleanLiteral} value=BOOL
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }

		//value=BOOL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_1_1_0() { return cValueBOOLTerminalRuleCall_1_1_0; }

		//{Not} "NOT" cond=Condition
		public Group getGroup_2() { return cGroup_2; }

		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }

		//"NOT"
		public Keyword getNOTKeyword_2_1() { return cNOTKeyword_2_1; }

		//cond=Condition
		public Assignment getCondAssignment_2_2() { return cCondAssignment_2_2; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_2_2_0() { return cCondConditionParserRuleCall_2_2_0; }

		//{BooleanReference} var=[VariableDeclaration]
		public Group getGroup_3() { return cGroup_3; }

		//{BooleanReference}
		public Action getBooleanReferenceAction_3_0() { return cBooleanReferenceAction_3_0; }

		//var=[VariableDeclaration]
		public Assignment getVarAssignment_3_1() { return cVarAssignment_3_1; }

		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_3_1_0() { return cVarVariableDeclarationCrossReference_3_1_0; }

		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_3_1_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_3_1_0_1; }

		//MathExpression ({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Geq.left=current} ">=" |
		//{Gtr.left=current} ">") right=MathExpression
		public Group getGroup_4() { return cGroup_4; }

		//MathExpression
		public RuleCall getMathExpressionParserRuleCall_4_0() { return cMathExpressionParserRuleCall_4_0; }

		//{Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Geq.left=current} ">=" |
		//{Gtr.left=current} ">"
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//{Leq.left=current} "<="
		public Group getGroup_4_1_0() { return cGroup_4_1_0; }

		//{Leq.left=current}
		public Action getLeqLeftAction_4_1_0_0() { return cLeqLeftAction_4_1_0_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_4_1_0_1() { return cLessThanSignEqualsSignKeyword_4_1_0_1; }

		//{Less.left=current} "<"
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//{Less.left=current}
		public Action getLessLeftAction_4_1_1_0() { return cLessLeftAction_4_1_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_4_1_1_1() { return cLessThanSignKeyword_4_1_1_1; }

		//{Eq.left=current} "=="
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//{Eq.left=current}
		public Action getEqLeftAction_4_1_2_0() { return cEqLeftAction_4_1_2_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4_1_2_1() { return cEqualsSignEqualsSignKeyword_4_1_2_1; }

		//{Geq.left=current} ">="
		public Group getGroup_4_1_3() { return cGroup_4_1_3; }

		//{Geq.left=current}
		public Action getGeqLeftAction_4_1_3_0() { return cGeqLeftAction_4_1_3_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_4_1_3_1() { return cGreaterThanSignEqualsSignKeyword_4_1_3_1; }

		//{Gtr.left=current} ">"
		public Group getGroup_4_1_4() { return cGroup_4_1_4; }

		//{Gtr.left=current}
		public Action getGtrLeftAction_4_1_4_0() { return cGtrLeftAction_4_1_4_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_1_4_1() { return cGreaterThanSignKeyword_4_1_4_1; }

		//right=MathExpression
		public Assignment getRightAssignment_4_2() { return cRightAssignment_4_2; }

		//MathExpression
		public RuleCall getRightMathExpressionParserRuleCall_4_2_0() { return cRightMathExpressionParserRuleCall_4_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value returns ecore::EString:
		//	NumericValue | BOOL | STRING;
		public ParserRule getRule() { return rule; }

		//NumericValue | BOOL | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericValue
		public RuleCall getNumericValueParserRuleCall_0() { return cNumericValueParserRuleCall_0; }

		//BOOL
		public RuleCall getBOOLTerminalRuleCall_1() { return cBOOLTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}

	public class NumericValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericValue returns ecore::EString:
		//	INT | REAL;
		public ParserRule getRule() { return rule; }

		//INT | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//REAL
		public RuleCall getREALTerminalRuleCall_1() { return cREALTerminalRuleCall_1; }
	}
	
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cT_INTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cT_INTIntKeyword_0_0 = (Keyword)cT_INTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cT_REALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cT_REALRealKeyword_1_0 = (Keyword)cT_REALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cT_BOOLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cT_BOOLBoolKeyword_2_0 = (Keyword)cT_BOOLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cT_STRINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cT_STRINGStringKeyword_3_0 = (Keyword)cT_STRINGEnumLiteralDeclaration_3.eContents().get(0);
		
		//// TYPES
		//enum Type:
		//	T_INT="int" | T_REAL="real" | T_BOOL="bool" | T_STRING="string";
		public EnumRule getRule() { return rule; }

		//T_INT="int" | T_REAL="real" | T_BOOL="bool" | T_STRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//T_INT="int"
		public EnumLiteralDeclaration getT_INTEnumLiteralDeclaration_0() { return cT_INTEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getT_INTIntKeyword_0_0() { return cT_INTIntKeyword_0_0; }

		//T_REAL="real"
		public EnumLiteralDeclaration getT_REALEnumLiteralDeclaration_1() { return cT_REALEnumLiteralDeclaration_1; }

		//"real"
		public Keyword getT_REALRealKeyword_1_0() { return cT_REALRealKeyword_1_0; }

		//T_BOOL="bool"
		public EnumLiteralDeclaration getT_BOOLEnumLiteralDeclaration_2() { return cT_BOOLEnumLiteralDeclaration_2; }

		//"bool"
		public Keyword getT_BOOLBoolKeyword_2_0() { return cT_BOOLBoolKeyword_2_0; }

		//T_STRING="string"
		public EnumLiteralDeclaration getT_STRINGEnumLiteralDeclaration_3() { return cT_STRINGEnumLiteralDeclaration_3; }

		//"string"
		public Keyword getT_STRINGStringKeyword_3_0() { return cT_STRINGStringKeyword_3_0; }
	}
	
	private ProgramElements pProgram;
	private GlobalSectionElements pGlobalSection;
	private EventSectionElements pEventSection;
	private HandlerSectionElements pHandlerSection;
	private EventDeclElements pEventDecl;
	private HandlerDeclElements pHandlerDecl;
	private AbstractBlockElements pAbstractBlock;
	private CommandElements pCommand;
	private ConstructElements pConstruct;
	private VariableDeclarationElements pVariableDeclaration;
	private ExpressionElements pExpression;
	private MathExpressionElements pMathExpression;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PrimaryExpressionElements pPrimaryExpression;
	private ConditionElements pCondition;
	private BinaryBooleanElements pBinaryBoolean;
	private UnaryBooleanElements pUnaryBoolean;
	private TypeElements unknownRuleType;
	private ValueElements pValue;
	private NumericValueElements pNumericValue;
	private TerminalRule tINT;
	private TerminalRule tREAL;
	private TerminalRule tBOOL;
	private TerminalRule tSTRING;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventOrientedLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Main structure of a program. Global variables, events and handlers can be declared
	// * in any order but sections must stay separated. The init section must be the last one
	// * and it is mandatory.
	// * /Program:
	//	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=AbstractBlock "end";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//// SECTIONS
	//GlobalSection:
	//	"globals:" (globals+=VariableDeclaration ";")+;
	public GlobalSectionElements getGlobalSectionAccess() {
		return (pGlobalSection != null) ? pGlobalSection : (pGlobalSection = new GlobalSectionElements());
	}
	
	public ParserRule getGlobalSectionRule() {
		return getGlobalSectionAccess().getRule();
	}

	//EventSection:
	//	"events:" (events+=EventDecl ";")+;
	public EventSectionElements getEventSectionAccess() {
		return (pEventSection != null) ? pEventSection : (pEventSection = new EventSectionElements());
	}
	
	public ParserRule getEventSectionRule() {
		return getEventSectionAccess().getRule();
	}

	//HandlerSection:
	//	"handlers:" handlers+=HandlerDecl+;
	public HandlerSectionElements getHandlerSectionAccess() {
		return (pHandlerSection != null) ? pHandlerSection : (pHandlerSection = new HandlerSectionElements());
	}
	
	public ParserRule getHandlerSectionRule() {
		return getHandlerSectionAccess().getRule();
	}

	//EventDecl:
	//	name=ID "(" (params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")";
	public EventDeclElements getEventDeclAccess() {
		return (pEventDecl != null) ? pEventDecl : (pEventDecl = new EventDeclElements());
	}
	
	public ParserRule getEventDeclRule() {
		return getEventDeclAccess().getRule();
	}

	//HandlerDecl:
	//	name=ID "[" (bindParams+=VariableDeclaration ("," bindParams+=VariableDeclaration)*)? "]" "("
	//	(params+=VariableDeclaration ("," params+=VariableDeclaration)*)? ")" body=AbstractBlock;
	public HandlerDeclElements getHandlerDeclAccess() {
		return (pHandlerDecl != null) ? pHandlerDecl : (pHandlerDecl = new HandlerDeclElements());
	}
	
	public ParserRule getHandlerDeclRule() {
		return getHandlerDeclAccess().getRule();
	}

	/// *
	// * Block java-style with Composite
	// * /AbstractBlock:
	//	Command ";" | Construct | {Compound} "{" body+=AbstractBlock* "}";
	public AbstractBlockElements getAbstractBlockAccess() {
		return (pAbstractBlock != null) ? pAbstractBlock : (pAbstractBlock = new AbstractBlockElements());
	}
	
	public ParserRule getAbstractBlockRule() {
		return getAbstractBlockAccess().getRule();
	}

	//Command:
	//	VariableDeclaration | {VariableAssign} name=[VariableDeclaration] "=" value=Expression | {BindHandler}
	//	eventName=[EventDecl] "+=" handlerName=[HandlerDecl] "[" (bindParams+=Expression ("," bindParams+=Expression))? "]" |
	//	{UnbindHandler} eventName=[EventDecl] "-=" handlerName=[HandlerDecl] | {RaiseEvent} "raise" event=[EventDecl] "("
	//	(params+=Expression ("," params+=Expression)*)? ")" | {PrintOutput} "out" output=Expression | {ReadInput} "in"
	//	input=[VariableDeclaration];
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Construct:
	//	{IfThenElse} "if" "(" condition=Condition ")" thenBlock=AbstractBlock (balanced?="else" elseBlock=AbstractBlock)? |
	//	{While} "while" "(" condition=Condition ")" block=AbstractBlock;
	public ConstructElements getConstructAccess() {
		return (pConstruct != null) ? pConstruct : (pConstruct = new ConstructElements());
	}
	
	public ParserRule getConstructRule() {
		return getConstructAccess().getRule();
	}

	//VariableDeclaration:
	//	type=Type name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//// EXPRESSIONS
	//Expression:
	//	MathExpression | Condition;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//MathExpression:
	//	Addition;
	public MathExpressionElements getMathExpressionAccess() {
		return (pMathExpression != null) ? pMathExpression : (pMathExpression = new MathExpressionElements());
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}

	//Addition returns MathExpression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns MathExpression:
	//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryExpression returns MathExpression:
	//	"(" MathExpression ")" | {NumberLiteral} value=NumericValue | {VariableReference} var=[VariableDeclaration];
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//// CONDITIONS
	//Condition:
	//	BinaryBoolean;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//BinaryBoolean returns Condition:
	//	UnaryBoolean (({And.left=current} "AND" | {Or.left=current} "OR") right=UnaryBoolean)*;
	public BinaryBooleanElements getBinaryBooleanAccess() {
		return (pBinaryBoolean != null) ? pBinaryBoolean : (pBinaryBoolean = new BinaryBooleanElements());
	}
	
	public ParserRule getBinaryBooleanRule() {
		return getBinaryBooleanAccess().getRule();
	}

	//UnaryBoolean returns Condition:
	//	"(" Condition ")" // true o false
	//	// negazione
	//	// riferimento a variabile booleana
	//	// confronto tra espressioni
	//	| {BooleanLiteral} value=BOOL | {Not} "NOT" cond=Condition | {BooleanReference} var=[VariableDeclaration] |
	//	MathExpression ({Leq.left=current} "<=" | {Less.left=current} "<" | {Eq.left=current} "==" | {Geq.left=current} ">=" |
	//	{Gtr.left=current} ">") right=MathExpression;
	public UnaryBooleanElements getUnaryBooleanAccess() {
		return (pUnaryBoolean != null) ? pUnaryBoolean : (pUnaryBoolean = new UnaryBooleanElements());
	}
	
	public ParserRule getUnaryBooleanRule() {
		return getUnaryBooleanAccess().getRule();
	}

	//// TYPES
	//enum Type:
	//	T_INT="int" | T_REAL="real" | T_BOOL="bool" | T_STRING="string";
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Value returns ecore::EString:
	//	NumericValue | BOOL | STRING;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//NumericValue returns ecore::EString:
	//	INT | REAL;
	public NumericValueElements getNumericValueAccess() {
		return (pNumericValue != null) ? pNumericValue : (pNumericValue = new NumericValueElements());
	}
	
	public ParserRule getNumericValueRule() {
		return getNumericValueAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal REAL returns ecore::EDouble:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal BOOL returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
