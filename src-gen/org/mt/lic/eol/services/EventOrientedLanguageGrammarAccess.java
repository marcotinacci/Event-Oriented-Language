/*
* generated by Xtext
*/

package org.mt.lic.eol.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EventOrientedLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cGlobalsAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cGlobalsGlobalSectionParserRuleCall_0_0_0 = (RuleCall)cGlobalsAssignment_0_0.eContents().get(0);
		private final Assignment cEventsAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final RuleCall cEventsEventSectionParserRuleCall_0_1_0 = (RuleCall)cEventsAssignment_0_1.eContents().get(0);
		private final Assignment cHandlersAssignment_0_2 = (Assignment)cUnorderedGroup_0.eContents().get(2);
		private final RuleCall cHandlersHandlerSectionParserRuleCall_0_2_0 = (RuleCall)cHandlersAssignment_0_2.eContents().get(0);
		private final Keyword cInitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitCompoundParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		// * Main structure of a program. Global variables, events and handlers can be declared
		// * in any order but sections must stay separated. The init section must be the last one
		// * and it is mandatory.
		// * /Program:
		//	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=Compound "end";
		public ParserRule getRule() { return rule; }

		//(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=Compound "end"
		public Group getGroup() { return cGroup; }

		//globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//globals=GlobalSection?
		public Assignment getGlobalsAssignment_0_0() { return cGlobalsAssignment_0_0; }

		//GlobalSection
		public RuleCall getGlobalsGlobalSectionParserRuleCall_0_0_0() { return cGlobalsGlobalSectionParserRuleCall_0_0_0; }

		//events=EventSection?
		public Assignment getEventsAssignment_0_1() { return cEventsAssignment_0_1; }

		//EventSection
		public RuleCall getEventsEventSectionParserRuleCall_0_1_0() { return cEventsEventSectionParserRuleCall_0_1_0; }

		//handlers=HandlerSection?
		public Assignment getHandlersAssignment_0_2() { return cHandlersAssignment_0_2; }

		//HandlerSection
		public RuleCall getHandlersHandlerSectionParserRuleCall_0_2_0() { return cHandlersHandlerSectionParserRuleCall_0_2_0; }

		//"init:"
		public Keyword getInitKeyword_1() { return cInitKeyword_1; }

		//init=Compound
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }

		//Compound
		public RuleCall getInitCompoundParserRuleCall_2_0() { return cInitCompoundParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class GlobalSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cGlobalsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cGlobalsVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cGlobalsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//GlobalSection:
		//	"globals:" (globals+=VariableDeclaration ";")+;
		public ParserRule getRule() { return rule; }

		//"globals:" (globals+=VariableDeclaration ";")+
		public Group getGroup() { return cGroup; }

		//"globals:"
		public Keyword getGlobalsKeyword_0() { return cGlobalsKeyword_0; }

		//(globals+=VariableDeclaration ";")+
		public Group getGroup_1() { return cGroup_1; }

		//globals+=VariableDeclaration
		public Assignment getGlobalsAssignment_1_0() { return cGlobalsAssignment_1_0; }

		//VariableDeclaration
		public RuleCall getGlobalsVariableDeclarationParserRuleCall_1_0_0() { return cGlobalsVariableDeclarationParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class EventSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEventsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEventsEventDeclParserRuleCall_1_0_0 = (RuleCall)cEventsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//EventSection:
		//	"events:" (events+=EventDecl ";")+;
		public ParserRule getRule() { return rule; }

		//"events:" (events+=EventDecl ";")+
		public Group getGroup() { return cGroup; }

		//"events:"
		public Keyword getEventsKeyword_0() { return cEventsKeyword_0; }

		//(events+=EventDecl ";")+
		public Group getGroup_1() { return cGroup_1; }

		//events+=EventDecl
		public Assignment getEventsAssignment_1_0() { return cEventsAssignment_1_0; }

		//EventDecl
		public RuleCall getEventsEventDeclParserRuleCall_1_0_0() { return cEventsEventDeclParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class HandlerSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HandlerSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHandlersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHandlersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHandlersHandlerDeclParserRuleCall_1_0 = (RuleCall)cHandlersAssignment_1.eContents().get(0);
		
		//HandlerSection:
		//	"handlers:" handlers+=HandlerDecl+;
		public ParserRule getRule() { return rule; }

		//"handlers:" handlers+=HandlerDecl+
		public Group getGroup() { return cGroup; }

		//"handlers:"
		public Keyword getHandlersKeyword_0() { return cHandlersKeyword_0; }

		//handlers+=HandlerDecl+
		public Assignment getHandlersAssignment_1() { return cHandlersAssignment_1; }

		//HandlerDecl
		public RuleCall getHandlersHandlerDeclParserRuleCall_1_0() { return cHandlersHandlerDeclParserRuleCall_1_0; }
	}

	public class ParamDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ParamDeclaration:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EventDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParamDeclarationParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParamDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EventDecl:
		//	name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=ParamDeclaration ("," params+=ParamDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=ParamDeclaration
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//ParamDeclaration
		public RuleCall getParamsParamDeclarationParserRuleCall_2_0_0() { return cParamsParamDeclarationParserRuleCall_2_0_0; }

		//("," params+=ParamDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=ParamDeclaration
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//ParamDeclaration
		public RuleCall getParamsParamDeclarationParserRuleCall_2_1_1_0() { return cParamsParamDeclarationParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class HandlerDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HandlerDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParamDeclarationParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParamDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyCompoundParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//HandlerDecl:
		//	name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")" body=Compound;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")" body=Compound
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=ParamDeclaration ("," params+=ParamDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=ParamDeclaration
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//ParamDeclaration
		public RuleCall getParamsParamDeclarationParserRuleCall_2_0_0() { return cParamsParamDeclarationParserRuleCall_2_0_0; }

		//("," params+=ParamDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=ParamDeclaration
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//ParamDeclaration
		public RuleCall getParamsParamDeclarationParserRuleCall_2_1_1_0() { return cParamsParamDeclarationParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//body=Compound
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Compound
		public RuleCall getBodyCompoundParserRuleCall_4_0() { return cBodyCompoundParserRuleCall_4_0; }
	}

	public class CompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompoundAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cBodyAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBodyCompoundParserRuleCall_1_0_1_0 = (RuleCall)cBodyAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cBodyAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cBodyCommandParserRuleCall_1_1_0_0 = (RuleCall)cBodyAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//// Compound java-style
		//Compound:
		//	{Compound} ("{" body+=Compound* "}" | body+=Command? ";");
		public ParserRule getRule() { return rule; }

		//{Compound} ("{" body+=Compound* "}" | body+=Command? ";")
		public Group getGroup() { return cGroup; }

		//{Compound}
		public Action getCompoundAction_0() { return cCompoundAction_0; }

		//"{" body+=Compound* "}" | body+=Command? ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"{" body+=Compound* "}"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0_0() { return cLeftCurlyBracketKeyword_1_0_0; }

		//body+=Compound*
		public Assignment getBodyAssignment_1_0_1() { return cBodyAssignment_1_0_1; }

		//Compound
		public RuleCall getBodyCompoundParserRuleCall_1_0_1_0() { return cBodyCompoundParserRuleCall_1_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_0_2() { return cRightCurlyBracketKeyword_1_0_2; }

		//body+=Command? ";"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//body+=Command?
		public Assignment getBodyAssignment_1_1_0() { return cBodyAssignment_1_1_0; }

		//Command
		public RuleCall getBodyCommandParserRuleCall_1_1_0_0() { return cBodyCommandParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBindHandlerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUnbindHandlerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// TODO kind of commands
		//Command:
		//	VariableDeclaration | VariableAssign | BindHandler | UnbindHandler;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration | VariableAssign | BindHandler | UnbindHandler
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_0() { return cVariableDeclarationParserRuleCall_0; }

		//VariableAssign
		public RuleCall getVariableAssignParserRuleCall_1() { return cVariableAssignParserRuleCall_1; }

		//BindHandler
		public RuleCall getBindHandlerParserRuleCall_2() { return cBindHandlerParserRuleCall_2; }

		//UnbindHandler
		public RuleCall getUnbindHandlerParserRuleCall_3() { return cUnbindHandlerParserRuleCall_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VariableDeclaration:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_0_0() { return cTypeTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BindHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BindHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0 = (RuleCall)cEventNameAssignment_0.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHandlerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHandlerNameIDTerminalRuleCall_2_0 = (RuleCall)cHandlerNameAssignment_2.eContents().get(0);
		
		//// subscribe the handler to the event
		//BindHandler:
		//	eventName=ID "+=" handlerName=ID;
		public ParserRule getRule() { return rule; }

		//eventName=ID "+=" handlerName=ID
		public Group getGroup() { return cGroup; }

		//eventName=ID
		public Assignment getEventNameAssignment_0() { return cEventNameAssignment_0; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0() { return cEventNameIDTerminalRuleCall_0_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }

		//handlerName=ID
		public Assignment getHandlerNameAssignment_2() { return cHandlerNameAssignment_2; }

		//ID
		public RuleCall getHandlerNameIDTerminalRuleCall_2_0() { return cHandlerNameIDTerminalRuleCall_2_0; }
	}

	public class UnbindHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnbindHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0 = (RuleCall)cEventNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHandlerNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHandlerNameIDTerminalRuleCall_2_0 = (RuleCall)cHandlerNameAssignment_2.eContents().get(0);
		
		//// unsubscribe the handler to the event
		//// TODO check the subscription of the handler at runtime 
		//UnbindHandler:
		//	eventName=ID "-=" handlerName=ID;
		public ParserRule getRule() { return rule; }

		//eventName=ID "-=" handlerName=ID
		public Group getGroup() { return cGroup; }

		//eventName=ID
		public Assignment getEventNameAssignment_0() { return cEventNameAssignment_0; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0() { return cEventNameIDTerminalRuleCall_0_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//handlerName=ID
		public Assignment getHandlerNameAssignment_2() { return cHandlerNameAssignment_2; }

		//ID
		public RuleCall getHandlerNameIDTerminalRuleCall_2_0() { return cHandlerNameIDTerminalRuleCall_2_0; }
	}

	public class VariableAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableAssign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VariableAssign:
		//	name=ID "=" value=INT;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cREALRealKeyword_1_0 = (Keyword)cREALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLBoolKeyword_2_0 = (Keyword)cBOOLEnumLiteralDeclaration_2.eContents().get(0);
		
		////Value:
		////INT;
		//enum Type:
		//	INT="int" | REAL="real" | BOOL="bool";
		public EnumRule getRule() { return rule; }

		//INT="int" | REAL="real" | BOOL="bool"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }

		//REAL="real"
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_1() { return cREALEnumLiteralDeclaration_1; }

		//"real"
		public Keyword getREALRealKeyword_1_0() { return cREALRealKeyword_1_0; }

		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_2() { return cBOOLEnumLiteralDeclaration_2; }

		//"bool"
		public Keyword getBOOLBoolKeyword_2_0() { return cBOOLBoolKeyword_2_0; }
	}
	
	private ProgramElements pProgram;
	private GlobalSectionElements pGlobalSection;
	private EventSectionElements pEventSection;
	private HandlerSectionElements pHandlerSection;
	private ParamDeclarationElements pParamDeclaration;
	private EventDeclElements pEventDecl;
	private HandlerDeclElements pHandlerDecl;
	private CompoundElements pCompound;
	private CommandElements pCommand;
	private VariableDeclarationElements pVariableDeclaration;
	private BindHandlerElements pBindHandler;
	private UnbindHandlerElements pUnbindHandler;
	private VariableAssignElements pVariableAssign;
	private TypeElements unknownRuleType;
	private TerminalRule tINT;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventOrientedLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Main structure of a program. Global variables, events and handlers can be declared
	// * in any order but sections must stay separated. The init section must be the last one
	// * and it is mandatory.
	// * /Program:
	//	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?) "init:" init=Compound "end";
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//GlobalSection:
	//	"globals:" (globals+=VariableDeclaration ";")+;
	public GlobalSectionElements getGlobalSectionAccess() {
		return (pGlobalSection != null) ? pGlobalSection : (pGlobalSection = new GlobalSectionElements());
	}
	
	public ParserRule getGlobalSectionRule() {
		return getGlobalSectionAccess().getRule();
	}

	//EventSection:
	//	"events:" (events+=EventDecl ";")+;
	public EventSectionElements getEventSectionAccess() {
		return (pEventSection != null) ? pEventSection : (pEventSection = new EventSectionElements());
	}
	
	public ParserRule getEventSectionRule() {
		return getEventSectionAccess().getRule();
	}

	//HandlerSection:
	//	"handlers:" handlers+=HandlerDecl+;
	public HandlerSectionElements getHandlerSectionAccess() {
		return (pHandlerSection != null) ? pHandlerSection : (pHandlerSection = new HandlerSectionElements());
	}
	
	public ParserRule getHandlerSectionRule() {
		return getHandlerSectionAccess().getRule();
	}

	//ParamDeclaration:
	//	type=Type name=ID;
	public ParamDeclarationElements getParamDeclarationAccess() {
		return (pParamDeclaration != null) ? pParamDeclaration : (pParamDeclaration = new ParamDeclarationElements());
	}
	
	public ParserRule getParamDeclarationRule() {
		return getParamDeclarationAccess().getRule();
	}

	//EventDecl:
	//	name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")";
	public EventDeclElements getEventDeclAccess() {
		return (pEventDecl != null) ? pEventDecl : (pEventDecl = new EventDeclElements());
	}
	
	public ParserRule getEventDeclRule() {
		return getEventDeclAccess().getRule();
	}

	//HandlerDecl:
	//	name=ID "(" (params+=ParamDeclaration ("," params+=ParamDeclaration)*)? ")" body=Compound;
	public HandlerDeclElements getHandlerDeclAccess() {
		return (pHandlerDecl != null) ? pHandlerDecl : (pHandlerDecl = new HandlerDeclElements());
	}
	
	public ParserRule getHandlerDeclRule() {
		return getHandlerDeclAccess().getRule();
	}

	//// Compound java-style
	//Compound:
	//	{Compound} ("{" body+=Compound* "}" | body+=Command? ";");
	public CompoundElements getCompoundAccess() {
		return (pCompound != null) ? pCompound : (pCompound = new CompoundElements());
	}
	
	public ParserRule getCompoundRule() {
		return getCompoundAccess().getRule();
	}

	//// TODO kind of commands
	//Command:
	//	VariableDeclaration | VariableAssign | BindHandler | UnbindHandler;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//VariableDeclaration:
	//	type=Type name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//// subscribe the handler to the event
	//BindHandler:
	//	eventName=ID "+=" handlerName=ID;
	public BindHandlerElements getBindHandlerAccess() {
		return (pBindHandler != null) ? pBindHandler : (pBindHandler = new BindHandlerElements());
	}
	
	public ParserRule getBindHandlerRule() {
		return getBindHandlerAccess().getRule();
	}

	//// unsubscribe the handler to the event
	//// TODO check the subscription of the handler at runtime 
	//UnbindHandler:
	//	eventName=ID "-=" handlerName=ID;
	public UnbindHandlerElements getUnbindHandlerAccess() {
		return (pUnbindHandler != null) ? pUnbindHandler : (pUnbindHandler = new UnbindHandlerElements());
	}
	
	public ParserRule getUnbindHandlerRule() {
		return getUnbindHandlerAccess().getRule();
	}

	//VariableAssign:
	//	name=ID "=" value=INT;
	public VariableAssignElements getVariableAssignAccess() {
		return (pVariableAssign != null) ? pVariableAssign : (pVariableAssign = new VariableAssignElements());
	}
	
	public ParserRule getVariableAssignRule() {
		return getVariableAssignAccess().getRule();
	}

	////Value:
	////INT;
	//enum Type:
	//	INT="int" | REAL="real" | BOOL="bool";
	public TypeElements getTypeAccess() {
		return (unknownRuleType != null) ? unknownRuleType : (unknownRuleType = new TypeElements());
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////terminal REAL returns ecore::EDouble:
	////	('0'..'9')* ('.' ('0'..'9')+)?;
	////terminal BOOL returns ecore::EBoolean:
	////	'true' | 'false';
	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
