grammar org.mt.lic.eol.EventOrientedLanguage with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate eventOrientedLanguage "http://www.mt.org/lic/eol/EventOrientedLanguage"

/*
 * Main structure of a program. Global variables, events and handlers can be declared
 * in any order but sections must stay separated. The init section must be the last one
 * and it is mandatory.
 */
Program:
	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?)
	'init:'
	init=AbstractBlock
	'end';

GlobalSection:
	'globals:' (globals+=VariableDeclaration ';')+;

EventSection:
	'events:' (events+=EventDecl ';')+;

HandlerSection:
	'handlers:' (handlers+=HandlerDecl)+;

ParamDeclaration:
	type=Type name=ID;

EventDecl:
	name=ID '(' (params+= ParamDeclaration (',' params+=ParamDeclaration)* )? ')';

HandlerDecl:
	name=ID '(' (params+= ParamDeclaration (',' params+=ParamDeclaration)* )? ')' body=AbstractBlock;

// Block java-style
AbstractBlock:
	Command ';'
	| {Compound} '{' (body+=AbstractBlock)* '}';

Command:
	VariableDeclaration
	| VariableAssign
	| BindHandler
	| UnbindHandler
	| RaiseEvent
	| PrintOutput
	| ReadInput;
	
PrintOutput:
	'out' output=Value;
	
ReadInput:
	'in' input=[VariableDeclaration];

VariableDeclaration:
	type=Type name=ID;

// subscribe the handler to the event
BindHandler:
	eventName=[EventDecl] '+=' handlerName=[HandlerDecl];

// unsubscribe the handler to the event 
UnbindHandler:
	eventName=[EventDecl] '-=' handlerName=[HandlerDecl];

VariableAssign:
	name=[VariableDeclaration] '=' value=Value;
	
RaiseEvent:
	'raise' eventName=[EventDecl] '(' (params+=Value (',' params+=Value)*)? ')';

enum Type:
	T_INT="int" | T_REAL="real" | T_BOOL="bool";

Value:
	INT | REAL | BOOL;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal REAL returns ecore::EDouble:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false';
