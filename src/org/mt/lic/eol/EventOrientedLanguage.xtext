grammar org.mt.lic.eol.EventOrientedLanguage with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate eventOrientedLanguage "http://www.mt.org/lic/eol/EventOrientedLanguage"

/*
 * Main structure of a program. Global variables, events and handlers can be declared
 * in any order but sections must stay separated. The init section must be the last one
 * and it is mandatory.
 */
Program:
	(globals=GlobalSection? & events=EventSection? & handlers=HandlerSection?)
	'init:'
	init=AbstractBlock
	'end';

// SECTIONS

GlobalSection:
	'globals:' (globals+=VariableDeclaration ';')+;

EventSection:
	'events:' (events+=EventDecl ';')+;

HandlerSection:
	'handlers:' (handlers+=HandlerDecl)+;

EventDecl:
	name=ID '(' (params+= VariableDeclaration (',' params+=VariableDeclaration)* )? ')';

HandlerDecl:
	name=ID '[' ( bindParams += VariableDeclaration (',' bindParams += VariableDeclaration)* )? ']'
		'(' (params+= VariableDeclaration (',' params+=VariableDeclaration)* )? ')' body=AbstractBlock;

/*
 * Block java-style with Composite
 */
AbstractBlock:
	Command 
	| { Compound } '{' (body+=AbstractBlock)* '}';

Command:
	(VariableDeclaration
	| { VariableAssign } name=[VariableDeclaration] '=' value=Expression
	| { BindHandler } eventName=[EventDecl] '+=' handlerName=[HandlerDecl] 
		'[' (bindParams+=Expression (',' bindParams+=Expression))? ']'
	| { UnbindHandler } eventName=[EventDecl] '-=' handlerName=[HandlerDecl]
	| { RaiseEvent } 'raise' event=[EventDecl] '(' (params+=Expression (',' params+=Expression)*)? ')'
	| { PrintOutput } 'out' output=Expression
	| { PrintString } 'out' output=STRING 
	| { ReadInput } 'in' input=[VariableDeclaration]) ';'
	| { IfThenElse } 'if' '(' condition=Expression ')' thenBlock=AbstractBlock ( balanced?='else' elseBlock=AbstractBlock )?
	| { While } 'while' '(' condition=Expression ')' block=AbstractBlock;

VariableDeclaration: 
	type=Type name=ID;
	
// EXPRESSIONS

Expression:
	Logical;
	
Logical returns Expression:
	Relation (({And.left=current} 'AND' | {Or.left=current} 'OR') right=Relation)*;
	
Relation returns Expression:
	Addition 
		(({Leq.left=current} '<='
		| {Less.left=current} '<'
		| {Eq.left=current} '=='
		| {Geq.left=current} '>='
		| {Gtr.left=current} '>')
		right=Addition)?;
	
Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	PrimaryExpression (({Multi.left=current} '*' | {Div.left=current} '/') right=PrimaryExpression)*;

PrimaryExpression returns Expression:
	'(' Expression ')'
	| { Not } 'NOT' cond=Expression
	| { NumberLiteral } value=Value
	| { VariableReference } var=[VariableDeclaration];

// TYPES

enum Type:
	T_INT="int" | T_REAL="real" | T_BOOL="bool" | T_STRING="string";

Value:
	 INT | REAL | BOOL | STRING;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal REAL returns ecore::EDouble:
	('0'..'9')* ('.' ('0'..'9')+)?;

terminal BOOL returns ecore::EBoolean:
	'true' | 'false';
	
terminal STRING returns ecore::EString:
	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" 
	| "\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";

